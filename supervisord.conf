[supervisord]
; Start in the foreground
nodaemon=true

[program:elasticsearch]

command=/scripts/elasticsearch_entry.sh
; don't start this as elasticsearch-user.
; The startscript needs root priv to fix ownership, will step down from root using gosu

; redirect output to standard output
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

; consider the service as started successfully when it ran 15 sec.
startsecs=15
autorestart=true


[program:cassandra]

command=/scripts/cassandra_entry.sh
; start as user cassandra - nothing in the startscript needs root rights.
user=cassandra

; redirect output to standard output
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

; consider the service as started successfully when it ran 60 sec.
startsecs=60
autorestart=true

[eventlistener:killOnFail]
; If any process fails, send a kill command to PID 1. This is usually init,
; but is the main process in a docker container, thus supervisord
; Also we need some program to listen to it and send the signal. Here comes this python script handy

events=PROCESS_STATE_FATAL
command=python /scripts/supervisord_eventlistener.py

stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0